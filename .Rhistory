knitr::opts_chunk$set(echo = TRUE)
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
setwd("~/GitHub/ACTSCI657")
knitr::opts_chunk$set(echo = TRUE)
# Load the data
property_fund <- read.table("PropertyFund.txt", header = TRUE)
# Fit Poisson regression model with EntityType, AlarmCredit, and log of Coverage as predictors
poisson_model <- glm(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund, family = "poisson")
# View the summary of the model
summary(poisson_model)
# Calculate the residual deviance and degrees of freedom
resid_deviance <- sum(poisson_model$deviance)
df <- poisson_model$df.residual
# Calculate the dispersion parameter
dispersion <- resid_deviance / df
# Print results
cat("Residual deviance:", resid_deviance, "\n")
cat("Degrees of freedom:", df, "\n")
cat("Dispersion parameter:", dispersion, "\n")
library(MASS)
# Fit negative binomial model
model_nb <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund)
# Print summary of results
summary(model_nb)
# Dispersion parameter
# Calculate the residual deviance and degrees of freedom
resid_deviance_nb <- sum(model_nb$deviance)
df_nb <- model_nb$df.residual
# Calculate the dispersion parameter
dispersion_nb <- resid_deviance_nb / df_nb
# Print results
cat("Residual deviance:", resid_deviance_nb, "\n")
cat("Degrees of freedom:", df_nb, "\n")
cat("Dispersion parameter:", dispersion_nb, "\n")
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
# Extract p-value of likelihood ratio test
p_value <- test_results["Pr(>Chisq)"][2]
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
# Extract p-value of likelihood ratio test
p_value <- test_results[2, "Pr(>Chisq)"]
p_value
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Extract p-value of likelihood ratio test
# p_value <- test_results[2, "Pr(>Chisq)"]
# p_value
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
# test_results
# Extract p-value of likelihood ratio test
p_value <- test_results[2, "Pr(>Chi)"]
p_value
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Extract p-value of likelihood ratio test
p_value <- test_results[2, "Pr(>Chi)"]
p_value
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Extract p-value of likelihood ratio test
p_value <- test_results["Pr(>Chi)"][2]
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")$"Pr(>F)"
test_results
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
View(test_results)
options(digits = 5)
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
# Likelihood ratio test with Anova
test_results <- anova(poisson_model, model_nb, test = "Chisq")
test_results
View(model_nb)
# Fit Poisson regression model with EntityType, AlarmCredit, and log of Coverage as predictors
poisson_model <- glm(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund, family = "quasipoisson")
# View the summary of the model
summary(poisson_model)
# Fit Poisson regression model with EntityType, AlarmCredit, and log of Coverage as predictors
poisson_model <- glm(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund, family = "poisson")
# View the summary of the model
summary(poisson_model)
# Fit Poisson regression model with EntityType, AlarmCredit, and log of Coverage as predictors
poisson_model <- glm(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund, family = "quasipoisson")
# View the summary of the model
summary(poisson_model)
mds_data <- subset(property_fund, EntityType == School & Coverage == 100 & AlarmCredit == AC10%)
mds_data <- subset(property_fund, EntityType == 'School' & Coverage == 100 & AlarmCredit == 'AC10%')
View(mds_data)
View(model_nb)
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame((EntityType == "School", AlarmCredit == "AC10%", Coverage == 100), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType == "School" & AlarmCredit == "AC10%" & Coverage == 100), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType == "School" & AlarmCredit == "AC10%" & Coverage == 100), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage == 100), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100), type = "response")
# Predict expected number of claims from Negative Binomial model
#negbin_preds <- predict(negbin_model, newdata = data.frame(exposure = 100, alarm = 1.1), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response)
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response)
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response)
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100, type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100), type = "response")
# Predict expected number of claims from Poisson model
poisson_preds <- predict(poisson_model, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100), type = "response")
# Predict expected number of claims from Negative Binomial model
nb_preds <- predict(model_nb, newdata = data.frame(EntityType = "School", AlarmCredit = "AC10%", Coverage = 100), type = "response")
# Print predicted expected number of claims from Poisson model
poisson_preds
# Print predicted expected number of claims from Negative Binomial model
nb_preds
# Calculate predicted probability for Poisson model
poisson_prob <- 1 - ppois(5, lambda=poisson_preds)
poisson_prob
# Calculate predicted probability for Negative Binomial model
nb_prob <- 1 - pnbinom(5, size=nb_fit$theta, mu=nb_preds)
# Calculate predicted probability for Poisson model
poisson_prob <- 1 - ppois(5, lambda=poisson_preds)
poisson_prob
# Calculate predicted probability for Negative Binomial model
nb_prob <- 1 - pnbinom(5, size=model_nb$theta, mu=nb_preds)
nb_prob
