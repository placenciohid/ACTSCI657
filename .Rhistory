setwd("~/GitHub/ACTSCI657")
knitr::opts_chunk$set(echo = TRUE)
# Load the data
property_fund <- read.table("PropertyFund.txt", header = TRUE)
# Fit Poisson regression model with EntityType, AlarmCredit, and log of Coverage as predictors
poisson_model <- glm(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund, family = "poisson")
# View the summary of the model
summary(poisson_model)
# Fit Negative Binomial regression model with EntityType, AlarmCredit, and log of Coverage as predictors
nb_model <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund)
Library(MASS)
library(MASS)
# Fit Negative Binomial regression model with EntityType, AlarmCredit, and log of Coverage as predictors
nb_model <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund)
# Calculate the residual deviance and residual degrees of freedom for the Poisson and Negative Binomial models
poisson_dev <- sum(resid(poisson_model, type = "pearson")^2)
poisson_df <- df.residual(poisson_model)
nb_dev <- sum(resid(nb_model, type = "pearson")^2)
nb_df <- df.residual(nb_model)
# Compare the residual deviance and residual degrees of freedom of the Poisson and Negative Binomial models
cat("Poisson residual deviance:", poisson_dev, "Poisson residual degrees of freedom:", poisson_df, "\n")
cat("Negative Binomial residual deviance:", nb_dev, "Negative Binomial residual degrees of freedom:", nb_df, "\n")
# Calculate the residual deviance and degrees of freedom
resid_deviance <- sum(poisson_model$deviance)
df <- poisson_model$df.residual
# Calculate the Pearson's chi-squared statistic
pearson_chi2 <- sum(poisson_model$pearson.resid^2)
# Calculate the dispersion parameter
dispersion <- pearson_chi2 / df
# Print results
cat("Residual deviance:", resid_deviance, "\n")
cat("Degrees of freedom:", df, "\n")
cat("Pearson's chi-squared statistic:", pearson_chi2, "\n")
cat("Dispersion parameter:", dispersion, "\n")
View(poisson_model)
# Calculate the residual deviance and degrees of freedom
resid_deviance <- sum(poisson_model$deviance)
df <- poisson_model$df.residual
# Calculate the dispersion parameter
dispersion <- sum(model$deviance) / model$df.residual
# Calculate the residual deviance and degrees of freedom
resid_deviance <- sum(poisson_model$deviance)
df <- poisson_model$df.residual
# Calculate the dispersion parameter
dispersion <- sum(poisson_model$deviance) / model$df.residual
# Calculate the residual deviance and degrees of freedom
resid_deviance <- sum(poisson_model$deviance)
df <- poisson_model$df.residual
# Calculate the dispersion parameter
dispersion <- sum(poisson_model$deviance) / poisson_model$df.residual
# Calculate the ratio of the residual deviance to the degrees of freedom
deviance_per_df <- resid_deviance / df
# Print results
cat("Residual deviance:", resid_deviance, "\n")
cat("Degrees of freedom:", df, "\n")
cat("Dispersion parameter:", dispersion, "\n")
cat("Deviance per degree of freedom:", deviance_per_df, "\n")
library(MASS)
# Fit negative binomial model
model_nb <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = PropertyFund)
library(MASS)
# Fit negative binomial model
model_nb <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = propertyFund)
library(MASS)
# Fit negative binomial model
model_nb <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = propertyfund)
library(MASS)
# Fit negative binomial model
model_nb <- glm.nb(Freq ~ EntityType + AlarmCredit + log(Coverage), data = property_fund)
# Print summary of results
summary(model_nb)
# Dispersion parameter
summary(model_nb)$dispersion
summary(poisson_model)$dispersion
poisson_model_dispersion <- summary(poisson_model)$dispersion
poisson_model_dispersion <- format(round(summary(poisson_model)$dispersion, 3), nsmall = 3)
# Dispersion parameter
# Calculate the residual deviance and degrees of freedom
resid_deviance_nb <- sum(model_nb$deviance)
df_nb <- model_nb$df.residual
# Calculate the dispersion parameter
dispersio_nbn <- resid_deviance_nb / df_nb
# Print results
cat("Residual deviance:", resid_deviance_nb, "\n")
cat("Degrees of freedom:", df_nb, "\n")
cat("Dispersion parameter:", dispersion_nb, "\n")
# Dispersion parameter
# Calculate the residual deviance and degrees of freedom
resid_deviance_nb <- sum(model_nb$deviance)
df_nb <- model_nb$df.residual
# Calculate the dispersion parameter
dispersio_nb <- resid_deviance_nb / df_nb
# Print results
cat("Residual deviance:", resid_deviance_nb, "\n")
cat("Degrees of freedom:", df_nb, "\n")
cat("Dispersion parameter:", dispersion_nb, "\n")
# Dispersion parameter
# Calculate the residual deviance and degrees of freedom
resid_deviance_nb <- sum(model_nb$deviance)
df_nb <- model_nb$df.residual
# Calculate the dispersion parameter
dispersion_nb <- resid_deviance_nb / df_nb
# Print results
cat("Residual deviance:", resid_deviance_nb, "\n")
cat("Degrees of freedom:", df_nb, "\n")
cat("Dispersion parameter:", dispersion_nb, "\n")
# Likelihood ratio test with Anova
test_result <- anova(model_poisson, model_nb, test = "Chisq")
# Likelihood ratio test with Anova
test_result <- anova(poisson_model, model_nb, test = "Chisq")
test_result
# Likelihood ratio test with Anova
test_result <- anova(poisson_model, model_nb, test = "Chisq")
test_result
summary(test_result)
# Likelihood ratio test with Anova
test_result <- anova(poisson_model, model_nb, test = "Chisq")
summary(test_result)
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
sum_test = unlist(summary(test))
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
sum_test = unlist(summary(test))
names(sum_test)
sum_test["Pr(>F)1"]
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
sum_test = unlist(summary(test))
names(sum_test)
sum_test["Pr(>F)2"]
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
sum_test = unlist(summary(test))
names(sum_test)
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
# Extract p-value of likelihood ratio test
p_value <- test["Pr(>Chisq)"][2]
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
# Extract p-value of likelihood ratio test
p_value <- test["Pr(>Chisq)"][2]
# Likelihood ratio test with Anova
test <- anova(poisson_model, model_nb, test = "Chisq")
# Extract p-value of likelihood ratio test
p_value <- test["Pr(>Chisq)"][2]
